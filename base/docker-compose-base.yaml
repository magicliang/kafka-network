# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

services:
  zookeeper:
    image: hyperledger/fabric-zookeeper
    # 总是重启，倒是很适合 cli 用。对于这种回自动寻找 peer 的节点倒是也很有用。
    restart: always
    ports:
      # zk 总是要开放三个端口的。
      - '2181'
      - '2888'
      - '3888'

  kafka:
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      # 默认的关键三个环境变量只有这三个
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      # 上一个值要大于等于下一个值
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
    ports:
      - '9092'

  # orderer 与 kafka 的关系，不是在这里可以看出来的，也不是在这里配置的，在 configtx 的配置里。
  orderer.ORDERER_DOMAIN:
    container_name: orderer.ORDERER_DOMAIN
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      # 从 fabric-test里学来的参数，似乎没有这两行也可以 work。
      # - CONFIGTX_ORDERER_ORDERERTYPE=kafka
      # - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
    - ../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
    # 注意，如果使用多个orderer，实际上这个默认的路径不一定就有用，一定要被子服务覆盖。
    # - ../crypto-config/ordererOrganizations/ORDERER_DOMAIN/orderers/orderer0.ORDERER_DOMAIN/msp:/var/hyperledger/orderer/msp
    # - ../crypto-config/ordererOrganizations/ORDERER_DOMAIN/orderers/orderer0.ORDERER_DOMAIN/tls/:/var/hyperledger/orderer/tls
    # 不准备做匿名数据卷
    # orderere 不能开放这个端口，不然子服务即使开放了新的端口，还是会试图开放这个端口，以至于造成冲突。
    # ports:
      # - 7050:7050

  # peer 要不要总是重启？
  peer0.ORG1_DOMAIN:
    container_name: peer0.ORG1_DOMAIN
    extends:
      file: peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer0.ORG1_DOMAIN
      - CORE_PEER_ADDRESS=peer0.ORG1_DOMAIN:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.ORG1_DOMAIN:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.ORG1_DOMAIN:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../crypto-config/peerOrganizations/ORG1_DOMAIN/peers/peer0.ORG1_DOMAIN/msp:/etc/hyperledger/fabric/msp
        - ../crypto-config/peerOrganizations/ORG1_DOMAIN/peers/peer0.ORG1_DOMAIN/tls:/etc/hyperledger/fabric/tls
    ports:
      - 7051:7051
      - 7052:7052
      - 7053:7053

  peer1.ORG1_DOMAIN:
    container_name: peer1.ORG1_DOMAIN
    extends:
      file: peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer1.ORG1_DOMAIN
      - CORE_PEER_ADDRESS=peer1.ORG1_DOMAIN:7051
      - CORE_PEER_CHAINCODEADDRESS=peer1.ORG1_DOMAIN:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.ORG1_DOMAIN:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.ORG1_DOMAIN:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../crypto-config/peerOrganizations/ORG1_DOMAIN/peers/peer1.ORG1_DOMAIN/msp:/etc/hyperledger/fabric/msp
        - ../crypto-config/peerOrganizations/ORG1_DOMAIN/peers/peer1.ORG1_DOMAIN/tls:/etc/hyperledger/fabric/tls

    ports:
      - 8051:7051
      - 8052:7052
      - 8053:7053

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    extends:
      file: peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls
    ports:
      - 9051:7051
      - 9052:7052
      - 9053:7053

  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    extends:
      file: peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls
    ports:
      - 10051:7051
      - 10052:7052
      - 10053:7053
